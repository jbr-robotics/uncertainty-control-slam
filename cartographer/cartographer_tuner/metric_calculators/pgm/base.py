from abc import abstractmethod
from pathlib import Path
from typing import Dict, List, Optional, Tuple

import numpy as np
import yaml
import cv2  # OpenCV for image loading

from ..base_calculator import BaseMetricCalculator, Metric

class BasePgmMetricCalculator(BaseMetricCalculator):
    """Abstract base class for metrics that evaluate PGM map files.
    
    This class extends the BaseMetricCalculator to provide a common interface
    for metrics that specifically evaluate the quality of PGM map files
    generated by SLAM algorithms.
    
    All PGM metric calculators should have these common parameters:
    - map_path: Path to the PGM map file
    - yaml_path: Optional path to the corresponding YAML metadata file
    """
    
    def __init__(
        self, 
        map_path: str, 
        yaml_path: Optional[str] = None
    ):
        """Initialize base PGM metric calculator.
        
        Args:
            map_path: Path to the PGM map file
            yaml_path: Optional path to the corresponding YAML metadata file
            
        Raises:
            ValueError: If file doesn't exist or isn't a PGM file
        """
        map_path = Path(map_path)
        if not map_path.exists():
            raise ValueError(f"Map file not found: {map_path}")
        if map_path.suffix.lower() != '.pgm':
            raise ValueError(f"Expected .pgm file, got: {map_path}")
            
        self.map_path = map_path
        self.yaml_path = Path(yaml_path) if yaml_path else None
        
        # Load the PGM file as a matrix using OpenCV
        self.map_data = self._load_pgm()
        
        # Always invert the map for metrics calculations
        self.map_data = self._invert_map(self.map_data)
        
        # Load YAML metadata if available
        self.metadata = None
        if self.yaml_path and self.yaml_path.exists():
            self._load_yaml_metadata()
    
    def _load_pgm(self) -> np.ndarray:
        """Load a PGM file into a numpy array using OpenCV.
        
        Returns:
            numpy.ndarray: 2D array containing the grayscale values
        """
        # OpenCV imread loads the image directly as a numpy array
        # IMREAD_UNCHANGED preserves the original bit depth
        map_data = cv2.imread(str(self.map_path), cv2.IMREAD_UNCHANGED)
        
        if map_data is None:
            raise ValueError(f"Failed to load PGM file: {self.map_path}")
            
        # If the image has multiple channels, convert to grayscale
        if len(map_data.shape) > 2:
            map_data = cv2.cvtColor(map_data, cv2.COLOR_BGR2GRAY)
            
        return map_data
    
    def _invert_map(self, map_data: np.ndarray) -> np.ndarray:
        """Invert the map values (255 - value).
        
        For metrics calculations, we invert the grayscale values to ensure
        consistent interpretation where 0 represents obstacles and 255
        represents free space.
        
        Args:
            map_data: The map data to invert
            
        Returns:
            numpy.ndarray: Inverted map data
        """
        return 255 - map_data
    
    def _load_yaml_metadata(self) -> None:
        """Load the YAML metadata file if available."""
        if self.yaml_path and self.yaml_path.exists():
            with open(self.yaml_path, 'r') as f:
                self.metadata = yaml.safe_load(f)

def show_image(image: np.ndarray, title: str = "Image", wait_key: bool = True):
    """Display an image in a window.
    
    Args:
        image: Image to display
        title: Window title
        wait_key: Whether to wait for a key press before continuing
    """
    cv2.imshow(title, image)
    if wait_key:
        cv2.waitKey(0)
        cv2.destroyWindow(title)